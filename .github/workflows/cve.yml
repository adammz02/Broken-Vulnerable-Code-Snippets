name: CVE scanner v2
on:
  push:
  pull_request:

concurrency:
  group: cve-scan-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_and_scan:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      PIP_CACHE_DIR: ~/.cache/pip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show workspace (debug)
        run: |
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          echo "--- top-level files ---"
          ls -la
          echo "--- repo tree (first 200 lines) ---"
          find . -maxdepth 3 -type f | sed -n '1,200p'
        shell: bash

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Verify python & pip
        run: |
          python -V || true
          which python || true
          python -m pip --version || true
          python -m pip list || true
        shell: bash

      - name: Get date
        id: get-date
        run: |
          echo "date=$(date -u +%Y%m%d)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache cve-bin-tool database
        uses: actions/cache@v4
        with:
          path: ~/.cache/cve-bin-tool
          key: Linux-cve-bin-tool-${{ steps.get-date.outputs.date }}
          restore-keys: |
            Linux-cve-bin-tool-

      - name: Install CVE Binary Tool
        id: install-cve
        run: |
          set -o pipefail
          python -m pip install --upgrade pip 2>&1 | tee pip-upgrade.log
          # Use main for latest features; swap to `pip install cve-bin-tool` to use PyPI.
          python -m pip install --no-cache-dir git+https://github.com/intel/cve-bin-tool@main 2>&1 | tee cve-install.log
        shell: bash

      - name: Build package if present
        id: build
        run: |
          set -euo pipefail
          BUILT=0
          if [ -f setup.py ]; then
            echo "Found setup.py — building wheel with setup.py"
            python -m pip install --upgrade wheel setuptools 2>&1 | tee build-deps.log
            python setup.py bdist_wheel 2>&1 | tee build.log || BUILT=0
            [ -d dist ] && BUILT=1 || BUILT=$BUILT
          elif [ -f pyproject.toml ]; then
            echo "Found pyproject.toml — building wheel with PEP 517 build"
            python -m pip install --upgrade build 2>&1 | tee build-deps.log
            python -m build --wheel 2>&1 | tee build.log || BUILT=0
            [ -d dist ] && BUILT=1 || BUILT=$BUILT
          else
            echo "No setup.py or pyproject.toml found — skipping build step"
          fi
          echo "built=$BUILT" >> $GITHUB_OUTPUT
        shell: bash
        continue-on-error: true

      - name: Scan built artifact or repository
        id: scan
        run: |
          set -euo pipefail
          if [ "${{ steps.build.outputs.built }}" = "1" ] && [ -d dist ]; then
            echo "Scanning dist/ for built packages"
            cve-bin-tool dist -f html -o cve-bin-tool-report.html -x 2>&1 | tee scan.log || true
          else
            echo "No built artifacts found — scanning repository files"
            # Adjust scan target as needed (e.g., src/ or specific directories)
            cve-bin-tool . -f html -o cve-bin-tool-report.html -x 2>&1 | tee scan.log || true
          fi
        continue-on-error: true
        shell: bash

      - name: Upload scan report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cve_report
          path: cve-bin-tool-report.html

      - name: Collect diagnostics on failure
        if: failure()
        run: |
          echo "Collecting diagnostics because a prior step failed."
          echo "=== ls -la workspace ===" > diagnostics.txt
          ls -la >> diagnostics.txt 2>&1 || true
          echo -e "\n=== df -h ===" >> diagnostics.txt
          df -h >> diagnostics.txt 2>&1 || true
          echo -e "\n=== pip freeze ===" >> diagnostics.txt
          python -m pip freeze >> diagnostics.txt 2>&1 || true
          echo -e "\n=== Recent logs (if any) ===" >> diagnostics.txt
          for f in pip-upgrade.log cve-install.log build-deps.log build.log scan.log; do
            if [ -f "$f" ]; then
              echo -e "\n--- $f ---" >> diagnostics.txt
              tail -n 500 "$f" >> diagnostics.txt
            fi
          done
          echo "Diagnostics written to diagnostics.txt"
        shell: bash

      - name: Upload diagnostics (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cve-scan-diagnostics
          path: diagnostics.txt
